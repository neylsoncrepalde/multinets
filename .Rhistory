g
degree(g)
igraph::degree(g)
hist(igraph::degree(g))
hist(igraph:degree(lazega))
hist(igraph:degree(sand::lazega))
hist(igraph::degree(sand::lazega))
g
plot(g)
plot(g, vertex.label=NA, vertex.size=5, layout=igraph::layout_with_kk)
help(multilevel_community)
help(multilevel.community)
g
igraph::any_multiple(g)
igraph::is.loop(g)
igraph::simplify(g)
matriz = igraph::as_adjacency_matrix(g)
class(matriz)
View(matriz)
matriz = as.matrix(matriz)
View(matriz)
linked_sim = igraph::graph_from_adjacency_matrix(matriz, mode="directed")
linked_sim
plot(linked_sim)
linked_sim = igraph::graph_from_adjacency_matrix(matriz, mode="undirected")
linked_sim
plot(linked_sim, vertex.label = NA, vertex.size=5)
tipo = c(rep(FALSE, 100), rep(TRUE, 50))
tipo
V(linked_sim)$type = tipo
igraph::V(linked_sim)$type = tipo
igraph::is.bipartite(linked_sim)
is_multilevel(linked_sim)
devtools::load_all()
igraph::is_bipartite(linked_sim)
is_multilevel(linked_sim)
test = set_color_multilevel(linked_sim)
test = set_shape_multilevel(test)
l = layout_multilevel(test)
devtools::load_all()
l = layout_multilevel(test)
igraph::plot(test, layout = l)
plot(test, layout = l)
plot(test, layout = l, vertex.label = NA, vertex.size=5)
plot(test, layout = l, vertex.label = NA, vertex.size=5, edge.width=2)
devtools::document()
test = set_color_multilevel(test)
plot(test, layout = l, vertex.label = NA, vertex.size=5, edge.width=2)
ex1 = extract_highlevel(test)
devtools::document()
ex1 = extract_highlevel(test)
ex2 = extract_lowlevel(test)
ex3 = extract_mesolevel(test)
plot(ex1)
plot(ex1, vertex.label=NA)
plot(ex2, vertex.label=NA)
plot(ex3, vertex.label=NA)
plot(ex3, vertex.label=NA, vertex.size=5)
plot(ex3, vertex.label=NA, vertex.size=5, layout=igraph::layout.bipartite)
transformacao = mode_transformation(ex3)
devtools::document()
transformacao = mode_transformation(ex3)
plot(transformacao$proj1)
plot(transformacao$proj2)
linked_sim
linked_sim
igraph::is_bipartite(linked_sim)
is_multilevel(linked_sim)
linked_sim
devtools::use_data(linked_sim)
linked_sim_matrix = as.matrix(igraph::as_adjacency_matrix(linked_sim))
linked_sim_matrix
devtools::use_data(linked_sim_matrix)
igraph::vertex_attr(linked_sim, "type")
linked_sim_type = igraph::vertex_attr(linked_sim, "type")
devtools::use_data(linked_sim_type)
linked_sim_matrix
class(linked_sim_matrix)
class(linked_sim_type)
linked_sim_type
View(ex2)
transformado_h <- mode_transformation(ex3)
plot(transformado_h)
transformado_h <- mode_transformation(ex3, "high")
plot(transformado_h)
#linked_sim
linked_sim
devtools::document()
help(linked_sim)
help(lazega)
q()
devtools::load_all()
data(package = "multinet")
data(package = "multinets")
data(package = "multinets")
devtools::document()
help(linked_sim_matri)
help(linked_sim_matrix)
help(linked_sim)
devtools::document()
help(linked_sim)
help(linked_sim_matrix)
devtools::document()
help(linked_sim_matrix)
help(linked_sim)
devtools::document()
q()
devtools::document()
help(linked_sim_matrix)
devtools::document()
help(linked_sim_matrix)
help(linked_sim_type)
help(linked_sim)
help(extract_highlevel)
devtools::document()
help(extract_highlevel)
devtools::use_testthat()
library(testthat)
data(package="igraph")
data(package="igraphdata")
devtools::test
devtools::test()
igraphdata::g.bip
devtools::test()
data(package="sand")
devtools::test()
devtools::test()
devtools::test()
q()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(testthat)
devtools::use_package("sand", "Suggests")
devtools::test()
help(is_multilevel)
help(layout_multilevel)
devtools::document()
help(layout_multilevel)
help(extract_highlevel)
help(extract_lowlevel)
help(extract_mesolevel)
help(mode_transformation)
devtools::document()
help(mode_transformation)
help(linked_sim)
citation(multilevel)
citation(multinets)
citation("multinets")
usethis::use_gpl3_license()
citation("multinets")
devtools::load_all()
devtools::document()
citation("multinets")
usethis::use_readme_rmd()
help(package="multinets")
devtools::check()
devtools::document()
help(is_multilevel)
help(set_shape_multilevel)
devtools::check()
library(statnet)
install.packages("statnet", dep=T)
devtools::check()
devtools::document()
devtools::check()
q()
is_multilevel
devtools::install_github("neylsoncrepalde/multinets")
q()
usethis::use_travis()
devtools::check()
devtools::check()
devtools::check()
q()
devtools::check()
devtools::build_win()
devtools::check()
devtools::check()
devtools::build_win()
version
getwd()
usethis::use_build_ignore("man/cran/cran-comments.md")
devtools::build_win(version = "R-devel")
devtools::revdep_check()
checks <- readRDS("~/multinets/revdep/checks.rds")
str(checks)
checks$results
devtools::check()
devtools::check()
usethis::use_build_ignore("/man/figures/README-example-1.png")
q()
devtools::release()
devtools::release()
devtools::document()
devtools::release()
devtools::check()
devtools::release()
devtools::release()
usethis::use_cran_comments()
devtools::release()
q()
q()
q()
devtools::load_all()
q()
devtools::load_all()
install.packages(c("broom", "car", "RcppEigen", "recipes", "rmarkdown", "stringi", "tidyverse", "timeDate", "tm", "usethis"))
install.packages(c("broom", "rmarkdown"))
q()
devtools::load_all()
help(is_multilevel)
is_multilevel(linked_sim)
is_multilevel
devtools::load_all()
is_multilevel(linked_sim)
devtools::document()
help(extract_highlevel)
organizations <- extract_highlevel(linked_sim)
individuals <- extract_lowlevel(linked_sim)
affiliations <- extract_mesolevel(linked_sim)
help(extract_mesolevel)
devtools::document()
help(extract_highlevel)
devtools::document()
help(extract_highlevel)
help(extract_mesolevel)
help(extract_lowlevel)
help(is_multilevel)
help(layout_multilevel)
l = layout_multilevel(linked_sim, layout = layout_with_kk)
l = layout_multilevel(linked_sim, layout = igraph::layout_with_kk)
l = layout_multilevel(linked_sim, layout = igraph::layout_with_kk())
l = layout_multilevel(linked_sim, layout = igraph::layout_with_fr
)
l = layout_multilevel(linked_sim, layout = igraph::layout_with_dh)
# Check if the network is multilevel
is_multilevel(linked_sim)
# Generate the layout (x,y) coordinates
l <- layout_multilevel(linked_sim)
# Plot the graph using the layout
plot(linked_sim, layout = l)
# Using Kamada Kawai algorithm
l.kk <- layout_multilevel(linked_sim, layout = igraph::layout_with_kk)
# Plot the graph with the new layout
plot(linked_sim, layout = l.kk)
help(mode_transformation)
# To obtain both transformed networks
transformed <- mode_transformation(affiliation)
# To obtain just one transformed network
high_transformed <- mode_transformation(affiliation, which = "high")
devtools::document()
help(mode_transformation)
# First, extract the mesolevel of the multilevel network
affiliation <- extract_mesolevel(linked_sim)
# To obtain both transformed networks
transformed <- mode_transformation(affiliation)
# To obtain just one transformed network
high_transformed <- mode_transformation(affiliation, which = "high")
help(set_color_multilevel)
system.time({# Check whether a graph is multilevel
is_multilevel(linked_sim)
# Set the colors for each level
linked_sim <- set_color_multilevel(linked_sim)})
system.time({# Check whether a graph is multilevel
is_multilevel(linked_sim)
# Set the colors for each level
linked_sim <- set_color_multilevel(linked_sim)})
system.time({# Check whether a graph is multilevel
is_multilevel(linked_sim)
# Set the colors for each level
linked_sim <- set_color_multilevel(linked_sim)})
system.time({# Check whether a graph is multilevel
is_multilevel(linked_sim)
# Set the colors for each level
linked_sim <- set_color_multilevel(linked_sim)})
microbenchmark::microbenchmark({# Check whether a graph is multilevel
is_multilevel(linked_sim)
# Set the colors for each level
linked_sim <- set_color_multilevel(linked_sim)})
microbenchmark::microbenchmark({# Check whether a graph is multilevel
is_multilevel(linked_sim)
# Set the colors for each level
linked_sim <- set_color_multilevel(linked_sim)}, times = 10)
help(set_shape_multilevel)
microbenchmark::microbenchmark({# Check whether a graph is multilevel
is_multilevel(linked_sim)
# Set the shapes for each level
linked_sim <- set_shape_multilevel(linked_sim)}, times = 10)
microbenchmark::microbenchmark({# Check whether a graph is multilevel
is_multilevel(linked_sim)
# Set the shapes for each level
linked_sim <- set_shape_multilevel(linked_sim)}, times = 10, unit = "s")
help(is_muiltilevel)
help(is_multilevel)
help(layout_multilevel)
devtools::build_win()
devtools::build_win(version = "R-devel")
devtools::check()
help(is_multilevel)
help(layout_multilevel)
help(extract_highlevel)
help(mode_transformation)
devtools::release()
usethis::use_build_ignore(".Rhistory")
devtools::release()
usethis::use_news_md()
badgecreatr::badgeplacer(githubaccount = "neylsoncrepalde",githubrepo = "multinets", branch = "master")
devtools::use_rcpp()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
path.expand("~")
library(multinets)
help("set_shape_multilevel")
data("linked_sim")
is_multilevel(linked_sim)
g = set_shape_multilevel(linked_sim)
g
devtools::document()
devtools::document()
library(multinets)
g
data("linked_sim")
g = set_shape_multilevel(linked_sim)
g
l = layout_multilevel(g)
l
plot(g, layout = l)
l = layout_multilevel(g, layout = layout_with_kk)
l = layout_multilevel(g, layout = igraph::layout_with_kk)
plot(g, layout = l)
rm(list=ls())
data(liked_sim)
devtools::load_all(multinets)
devtools::load_all()
data("linked_sim")
g = set_shape_multilevel(linked_sim)
g = set_color_multilevel(g)
l = layout_multilevel(g)
plot(g)
plot(g, layout = l)
igraph::layout_()
help(igraph::layout_)
library(multinets)
g
g = set_shape_multilevel(linked_sim)
g
l = layout_multilevel(g)
plot(g, layout=l)
devtools::load_all()
g = set_shape_multilevel(linked_sim)
g = set_color_multilevel(g)
l = layout_multilevel(g)
plot(g, layout=l)
library(multinets)
library(igraph)
bipartite_projection
devtools::document()
devtools::load_all()
g = set_shape_multilevel(linked_sim)
bip = extract_mesolevel(g)
is_bipartite(bip)
mode_transformation(bip, "high")
mode_transformation(bip, "low")
plot(bip)
plot(mode_transformation(bip, "high"))
plot(mode_transformation(bip, "low"))
mode_transformation(bip, "both")
bipartite_projection
devtools::document()
devtools::document()
devtools::load_all()
bip = extract_mesolevel(g)
mode_transformation(bip, "both")
mode_transformation(bip, "high")
mode_transformation(bip, "low")
bipartite_projection
bip
mode_transformation(bip, "high")
warnings()
devtools::test()
devtools::document()
devtools::load_all()
g = set_shape_multilevel(linked_sim)
g = set_color_multilevel(g)
bip = extract_mesolevel(g)
mode_transformation(bip)
mode_transformation(bip, "both")
mode_transformation(bip, "high")
mode_transformation(bip, "low")
mode_transformation(bip)
devtools::document()
devtools::load_all()
bip
mode_transformation(bip)
devtools::test()
devtools::test()
library(multinets)
devtools::document()
devtools::test()
devtools::document()
devtools::load_all()
g = set_shape_multilevel(linked_sim)
g = set_color_multilevel(g)
plot(g, layout=l)
devtools::test()
suppressWarnings(devtools::test())
library(multinets)
devtools::document()
g = set_shape_multilevel(linked_sim)
g = set_color_multilevel(g)
plot(g, layout = layout_multilevel(g))
plot(g, layout = layout_multilevel(g))
plot(g, layout = layout_multilevel(g))
plot(g, layout = layout_multilevel(g))
plot(g, layout = layout_multilevel(g))
plot(g, layout = layout_multilevel(g))
plot(g, layout = layout_multilevel(g))
devtools::test()
devtools::document()
help(mode_transformation)
# First, extract the mesolevel of the multilevel network
affiliation <- extract_mesolevel(linked_sim)
# To obtain both transformed networks
transformed <- mode_transformation(affiliation)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
help(expect_is)
gteste = igraph::upgrade_graph(g.bip)
proj = igraph::bipartite_projection(g.bip)
proj
class(proj)
class(proj$proj1)
mode_transformation(igraph::upgrade_graph(g.bip)) == proj
mode_transformation(igraph::upgrade_graph(g.bip))$proj1 == proj$proj1
mode_transformation(igraph::V(igraph::upgrade_graph(g.bip))$proj1) == V(proj$proj1)))
mode_transformation(igraph::V(igraph::upgrade_graph(g.bip))$proj1) == V(proj$proj1))
mode_transformation(igraph::V(igraph::upgrade_graph(g.bip))$proj1) == V(proj$proj1)
mode_transformation(igraph::V(igraph::upgrade_graph(g.bip))$proj1) == V(proj$proj1
)
typeof(proj$proj1)
class(proj$proj1)
devtools::test()
devtools::test()
proj$proj1
V(proj$proj1)
igraph::V(proj$proj1)
igraph::V(proj$proj1)$name
igraph::V(proj$proj1)$name == igraph::V(mode_transformation(igraph::upgrade_graph(g.bip))$proj1)$name
length(V(proj$proj1)$name)
length(igraph::V(proj$proj1)$name)
devtools::test()
devtools::test()
devtools::test()
library(multinets)
devtools::test()
devtools::check()
devtools::build_win(version = "R-devel")
help(set_color_multilevel)
is_multilevel(linked_sim)
linked_sim = set_color_multilevel(linked_sim)
set_color_multilevel
version
devtools::build_win(version = "R-devel")
devtools::build_win(version = "R-devel")
devtools::build_win(version = "R-devel")
devtools::build_win(version = "R-release")
devtools::release()
install.packages(c("digest", "git2r"))
devtools::release()
devtools::release()
library(devtools)
use_package("igraphdata")
install.packages('devtools', dep=T)
install.packages("devtools", dep = T)
install.packages("igraph")
install.packages('sand')
devtools::build_win(version = "R-release")
devtools::build_win(version = "R-devel")
devtools::release()
devtools::check()
devtools::release()
devtools::release()
devtools::release()
devtools::release()
install.packages("Aspell")
library(Aspell)
devtools::release()
q()
devtools::use_package("igraphdata", "Suggests")
requireNamespace("igraphdata", quietly = T)
devtools::release()
devtools::release()
devtools::check()
devtools::release()
igraphdata::rfid
data(rfid,package = "igraphdata")
rfid
q()
devtools::release()
devtools::release()
q()
